@startuml
title Application Architecture Classes Diagram

' =============================================================================
' Presentation Layer
' =============================================================================
package "Presentation Layer" {
  ' Server classes
  class CustomAsyncServer {
    +start() : void
    +_handle_client(reader, writer) : void
  }

  class Router {
    +add_route(path, handler) : void
    +resolve(request) : Response
  }

  ' Client class
  class ChatClient {
    +connect() : void
    +disconnect() : void
    +send_request(method, path, data) : Response
  }

  ' API abstractions
  class Request
  class Response
  class Endpoint
}

' =============================================================================
' Business/Domain Logic Layer
' =============================================================================
package "Business/Domain Logic Layer" {
  class ChatService {
    +create_user(data) : Response
    +get_user_id(data) : Response
    +create_chat(data) : Response
    +connect(data) : Response
    +get_status(data) : Response
  }

  class FileService {
    +upload(data) : Response
  }

  class InviteService {
    +generate_invite_link(data) : Response
    +accept_invite(token, user_id) : Response
  }

  class MessageService {
    +send_message(data) : Response
  }
}

' =============================================================================
' Data Access Layer (Persistence)
' =============================================================================
package "Data Access Layer" {
  abstract class BaseRepository {
    +upsert(obj) : T
    +get(id) : T
    +get_all(statement, order_by=null, limit=null) : Sequence<T>
    +delete(id) : void
  }

  ' Repositories
  class ChatRepository {
    +create(data) : Chat
  }
  class ChatFileRepository {
    +create(chat_id, file_id) : ChatFile
  }
  class ChatInviteRepository {
    +create(data) : ChatInvite
    +get_by_token(token) : ChatInvite
    +upsert(invite) : void
  }
  class ChatMessageRepository {
    +create(chat_id, message_id) : ChatMessage
    +get_last_messages(chat_id) : Sequence<Message>
    +get_unread_messages(chat_id, last_seen) : Sequence<Message>
  }
  class FileRepository {
    +create(dto) : File
  }
  class MessageRepository {
    +create(content) : Message
  }
  class UserRepository {
    +create(username) : User
    +get_by_username(username) : UUID
  }
  class UserChatRepository {
    +create(user_id, chat_id) : UserChat
    +add_members(user_ids, chat_id) : void
    +get_user_chats(user_id) : Sequence<Chat>
    +get_unread_messages_count(user_id, chat_id) : int
    +get_user_chat(user_id, chat_id) : UserChat
  }
  class UserMessageRepository {
    +create(user_id, message_id) : UserMessage
  }

  ' Domain Models encapsulated in the DAL
  package "Models" {
    class User {
      -username: str
      -is_active: bool
    }
    class Chat {
      -name: str
      -is_private: bool
      -owner_id: UUID
    }
    class Message {
      -content: str
    }
    class File {
      -filename: str
      -content: bytes
    }
    class UserChat
    class ChatMessage
    class ChatFile
    class ChatInvite {
      -token: str
      -is_accepted: bool
    }
    class UserMessage
  }

  ' Inheritance relationships (repositories derive from BaseRepository)
  BaseRepository <|-- ChatRepository
  BaseRepository <|-- ChatFileRepository
  BaseRepository <|-- ChatInviteRepository
  BaseRepository <|-- ChatMessageRepository
  BaseRepository <|-- FileRepository
  BaseRepository <|-- MessageRepository
  BaseRepository <|-- UserRepository
  BaseRepository <|-- UserChatRepository
  BaseRepository <|-- UserMessageRepository
}

' =============================================================================
' Infrastructure / Integration Layer
' =============================================================================
package "Infrastructure / Integration Layer" {
  ' Exceptions
  class BaseError
  class InternalError
  class StrategyError
  class UnsupportedPythonVersionError
  class FileUploadError
  class NotFoundError

  ' Logging and Settings components
  class Logger {
    +get_logger(name: str) : Logger
  }

  class Settings {
    -py_ver: PythonVersionSettings
    -db: DatabaseSettings
    -server: ServerSettings
  }
  class PythonVersionSettings {
    -min_major: int
    -min_minor: int
  }
  class DatabaseSettings {
    -url: str
  }
  class ServerSettings {
    -host: str
    -port: int
    -buffer_size_bytes: int
    -debug: bool
    -max_file_size_bytes: int
    -message_limit: int
    -message_history_limit: int
    -message_cooldown_seconds: int
    -token_size: int
    -default_chat_uuid: UUID
    -default_chat_name: str
    -default_user_uuid: UUID
    -default_user_name: str
    -timeout_seconds: int
  }

  ' Helper functions / decorators
  class RequiresPythonVersionDecorator << (U,#FFAAAA) >> {
    +requires_python_version() : Callable
  }
  class get_current_timestamp << (U,#FFAAAA) >> {
    +get_current_timestamp() : datetime
  }
}

' =============================================================================
' Dependencies between layers (dashed arrows indicate dependency)
' =============================================================================
' Presentation depends on Business logic
Router ..> ChatService : "calls"
ChatClient ..> Request
ChatClient ..> Response

' Business layer uses Data Access repositories
ChatService ..> ChatRepository : "uses"
ChatService ..> UserRepository : "uses"
ChatService ..> UserChatRepository : "uses"
MessageService ..> MessageRepository : "uses"
MessageService ..> ChatMessageRepository : "uses"
InviteService ..> ChatInviteRepository : "uses"
FileService ..> FileRepository : "uses"
FileService ..> ChatFileRepository : "uses"

' Infrastructure is cross-cutting:
CustomAsyncServer ..> Settings : "configures"
CustomAsyncServer ..> Logger : "logs via"
ChatService ..> Logger : "logs via"
BaseRepository ..> Logger : "logs via"

@enduml
